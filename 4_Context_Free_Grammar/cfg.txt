Alphabet
Terminals
    • Operators:  +, ->, *, /, %, =, ==, !=, , =, , = 
    • Separators: [, ], (, ), {, }, ;, :, ?, ,
    • Reserved Words: if, else, while, for, break, return, and, or, const, int, char, double, bool, cin, cout, void, namespace, std
Non-Terminals
    • Symbols like program, block, statement, expression represent syntactical rules.

Lexical Rules

Identifier -> Letter { Letter | Digit }
Letter -> "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
Digit -> "0" | "1" | "2" | ... | "9"
Zero -> "0"
NonZero -> "1" | "2" | "3" | ... | "9"
Constant -> Int | "-" NonZero { Digit }
Int -> Zero | NonZero { Digit }
Char -> Letter | Digit
String -> Char { Char }
RELATION -> "" | "=" | "=" | "!=" | "=" | ""



Syntactical Rules

Program -> {IncludeDirective} "int" "main" "(" ")" Block

IncludeDirective -> "#include" "" Identifier ""

Block -> "{" StmtList "}"

StmtList -> Stmt
StmtList -> StmtList Stmt

Stmt -> DeclStmt
Stmt -> ExprStmt
Stmt -> IOStmt
Stmt -> CompoundStmt
Stmt -> IfStmt
Stmt -> WhileStmt
Stmt -> ForStmt
Stmt -> ReturnStmt
Stmt -> BreakStmt

DeclStmt -> Type Identifier ["=" Expr] ";"

Type -> "int" | "double" | "char" | "bool"

ExprStmt -> Expr ";"

Expr -> Term {Relation Term}
Term -> Factor {("*" | "/" | "%") Factor}
Factor -> Id | Const | "(" Expr ")"

IOStmt -> "cin" "" Identifier | "cout" "" Expr { "" "endl" } ";"

CompoundStmt -> "{" StmtList "}"

IfStmt -> "if" "(" Expr ")" Stmt ["else" Stmt]

WhileStmt -> "while" "(" Expr ")" Stmt

ForStmt -> "for" "(" ExprStmt ExprStmt Expr ")" Stmt

ReturnStmt -> "return" [Expr] ";"

BreakStmt -> "break" ";"

