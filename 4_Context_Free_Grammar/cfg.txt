Alphabet
Terminals
    • Operators: + - * / % = == != < <= > >=
    • Separators: [, ], (, ), {, }, ;, :, ?, ,
    • Reserved Words: if, else, while, for, break, return, and, or, const, int, char, double, bool, cin, cout, void, namespace, std
Non-Terminals
    • Symbols like program, statement, expression represent syntactical rules.

Lexical Rules

Identifier -> Letter Tail0
Tail0 - > Letter Tail0 | Digit Tail0 | ε 
Letter -> "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
Digit -> "0" | "1" | "2" | ... | "9"
Zero -> "0"
NonZero -> "1" | "2" | "3" | ... | "9"
Constant -> Int | "-" NonZero  Digit 
Int -> Zero | NonZero Digit 
Char -> Letter | Digit
String -> Char TailC
TailC - > Char | ε 
RELATION -> "" | "=" | "=" | "!=" | "=" | ""



Syntactical Rules

Program -> "#include" "<" Identifier ">" "int" "main" "(" ")" "{" StmtList "}"

StmtList -> Stmt | StmtList Stmt | DeclStmt | ExprStmt | IOStmt | CompoundStmt | IfStmt | WhileStmt
		| ForStmt | ReturnStmt | BreakStmt | epsilon

DeclStmt -> Type Identifier Init ";"
Init - > “=” Expr | ε 
Type -> "int" | "double" | "char" | "bool"
ExprStmt -> Expr ";"
Expr -> Term Tail1
Tail1 - > (“+” | “-”) Term | ε 
Term -> Factor Tail2
Tail2- > (“*” | “/” | “%”) Factor Tail2 | ε 
Factor -> Identifier | Const | "(" Expr ")"
IOStmt -> "cin" “>>” Identifier | “cout” “<<” Identifier ";"
CompoundStmt -> "{" StmtList "}"
IfStmt -> "if" "(" Expr ")" Stmt ElseStmt
ElseStmt - > “else” Stmt | ε 
WhileStmt -> "while" "(" Expr ")" Stmt
ForStmt -> "for" "(" ExprStmt ExprStmt Expr ")" Stmt
ReturnStmt -> "return" value ";"
value - > Expr | ε 
BreakStmt -> "break" ";"
